import subprocess
import sys
import os
import json
import asyncio
import time
import logging
import psutil
from telethon import TelegramClient, events, Button, types
from telethon.tl.types import ChannelParticipantsAdmins

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
api_id = '10660752'
api_hash = '9fe01567773a2c41362c6033b0fb113d'
bot_token = '7420605073:AAEvURcOEZzIpk7KF9_B9D0J6DCQKe-WpQY'

print("Initializing bot...")
logging.info("Bot initializing...")

client = TelegramClient('bott', api_id, api_hash).start(bot_token=bot_token)

EMOJI_LIST = ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá']
IGNORE_LIST = {}
LAST_MENTION_TIME = {}
MENTION_TASKS = {}
USER_REMOVE_STATE = {}
USER_ADD_STATE = {}
SEND_MESSAGE_STATE = {}
USER_BLOCK_STATE = {}
USER_UNBLOCK_STATE = {}
PROCESS_STATE = {}
ADMINS = ['vsakoe0']
CHATS = {}
BLOCKED_USERS = set()
BLOCKED_CHATS = set()
SPAM_USERS = {}

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
IGNORE_FILE = 'ignore_list.json'
ADMINS_FILE = 'admins.json'
BLOCKED_USERS_FILE = 'blocked_users.json'
BLOCKED_CHATS_FILE = 'blocked_chats.json'
CHATS_FILE = 'chats.json'
BACKUP_FILE = 'backup.json'

def load_json(file, default):
    if os.path.exists(file):
        try:
            with open(file, 'r') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω —Ñ–∞–π–ª {file}. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    save_json(file, default)
    return default

def save_json(file, data):
    with open(file, 'w') as f:
        json.dump(data, f)

def load_data():
    global IGNORE_LIST, ADMINS, BLOCKED_USERS, BLOCKED_CHATS, CHATS
    IGNORE_LIST = load_json(IGNORE_FILE, {})
    ADMINS = load_json(ADMINS_FILE, ['vsakoe0'])
    BLOCKED_USERS = set(load_json(BLOCKED_USERS_FILE, []))
    BLOCKED_CHATS = set(load_json(BLOCKED_CHATS_FILE, []))
    CHATS = load_json(CHATS_FILE, {})
    logging.info("Data loaded successfully.")

def save_data():
    save_json(IGNORE_FILE, IGNORE_LIST)
    save_json(ADMINS_FILE, ADMINS)
    save_json(BLOCKED_USERS_FILE, list(BLOCKED_USERS))
    save_json(BLOCKED_CHATS_FILE, list(BLOCKED_CHATS))
    save_json(CHATS_FILE, CHATS)
    logging.info("Data saved successfully.")

def backup_data():
    backup = {
        'IGNORE_LIST': IGNORE_LIST,
        'ADMINS': ADMINS,
        'BLOCKED_USERS': list(BLOCKED_USERS),
        'BLOCKED_CHATS': list(BLOCKED_CHATS),
        'CHATS': CHATS
    }
    save_json(BACKUP_FILE, backup)
    logging.info("Backup created successfully.")

def restore_from_backup():
    try:
        with open(BACKUP_FILE, 'r') as f:
            backup = json.load(f)
            global IGNORE_LIST, ADMINS, BLOCKED_USERS, BLOCKED_CHATS, CHATS
            IGNORE_LIST = backup.get('IGNORE_LIST', {})
            ADMINS = backup.get('ADMINS', ['vsakoe0'])
            BLOCKED_USERS = set(backup.get('BLOCKED_USERS', []))
            BLOCKED_CHATS = set(backup.get('BLOCKED_CHATS', []))
            CHATS = backup.get('CHATS', {})
            save_data()
            logging.info("Data restored successfully from backup.")
            return True
    except (json.JSONDecodeError, IOError):
        logging.error("Failed to restore data from backup.")
        return False

load_data()

async def is_user_admin(chat_id, user_id):
    try:
        admins = await client.get_participants(chat_id, filter=ChannelParticipantsAdmins)
        return any(admin.id == user_id for admin in admins)
    except:
        await client.send_message(chat_id, "üòï –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤, –Ω–∞–∑–Ω–∞—á—å –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.")
        return False

async def mention_all_logic(event):
    chat_id = event.chat_id
    sender = await event.get_sender()

    if event.is_private:
        await event.reply("‚úã –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    if sender.id == (await client.get_me()).id:
        return  # –ë–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    if sender.username in BLOCKED_USERS:
        return

    if not await is_user_admin(chat_id, sender.id):
        await event.reply(f"üö´ <b>{sender.first_name}</b>, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–∞ —Å–æ–∑—ã–≤—ã.", parse_mode='html')
        return

    participants = await client.get_participants(chat_id)
    mentions = [p for p in participants if not p.bot and p.id != sender.id and p.username not in IGNORE_LIST.get(str(chat_id), set())]

    if not mentions:
        await event.reply("ü§î –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ–∫–æ–≥–æ —Å–æ–∑—ã–≤–∞—Ç—å.", parse_mode='html')
        return

    current_time = time.time()
    if chat_id in LAST_MENTION_TIME and (current_time - LAST_MENTION_TIME[chat_id] < 180):
        if chat_id not in MENTION_TASKS or MENTION_TASKS[chat_id].done():
            LAST_MENTION_TIME.pop(chat_id, None)
        else:
            await event.reply("‚è≥ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 3 –º–∏–Ω—É—Ç—ã.", parse_mode='html')
            return

    LAST_MENTION_TIME[chat_id] = current_time
    task = asyncio.create_task(send_mentions(chat_id, sender.username))
    MENTION_TASKS[chat_id] = task

    await event.reply(f"<b>{sender.first_name}</b> –∑–∞–ø—É—Å—Ç–∏–ª —Å–æ–∑—ã–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/stop</code> –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å. ü§ñ", buttons=[Button.inline("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑—ã–≤", b'stop_mention')], parse_mode='html')

async def send_mentions(chat_id, initiator):
    await asyncio.sleep(5)

    if chat_id in MENTION_TASKS and MENTION_TASKS[chat_id].cancelled():
        return

    participants = await client.get_participants(chat_id)
    mentions = [f"[{EMOJI_LIST[i % len(EMOJI_LIST)]}](tg://user?id={p.id})" for i, p in enumerate(participants) if not p.bot and p.username and p.username not in IGNORE_LIST.get(str(chat_id), set())]

    if not mentions:
        await client.send_message(chat_id, "ü§î –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ–∫–æ–≥–æ —Å–æ–∑—ã–≤–∞—Ç—å.", parse_mode='html')
        return

    for i in range(0, len(mentions), 10):
        await client.send_message(chat_id, ' '.join(mentions[i:i+10]), parse_mode='markdown')
        await asyncio.sleep(1)

    MENTION_TASKS.pop(chat_id, None)

@client.on(events.NewMessage(pattern='/start'))
async def on_start(event):
    if not event.is_private:
        return

    sender = await event.get_sender()
    await event.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {sender.first_name}. –Ø –∑–∞–∑—ã–≤–∞–ª–∞. –°–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã —Å–æ–∑–≤–∞—Ç—å –ª—é–¥–µ–π –≤ —á–∞—Ç–∞—Ö –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å—Ö–æ–¥–∫–∏. \n"
        "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç –∏ —Ç–æ–≥–¥–∞ —è –±—É–¥—É –ø–æ–ª–µ–∑–µ–Ω.",
        buttons=[
            [Button.url("–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", "https://t.me/Sozivalala_bot?startgroup=true")],
            [Button.url("–ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "t.me/sozivalala")]
        ]
    )

@client.on(events.NewMessage(pattern='/run'))
async def on_run(event):
    if not event.is_private:
        await mention_all_logic(event)

@client.on(events.NewMessage(func=lambda e: not e.is_private and any(trigger in e.raw_text for trigger in ['@a', '@all', '@everyone'])))
async def on_all(event):
    await mention_all_logic(event)

@client.on(events.NewMessage(pattern='/stop'))
async def stop_mention(event):
    user_id = event.sender_id
    chat_id = event.chat_id

    if not await is_user_admin(chat_id, user_id):
        await event.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑—ã–≤.", parse_mode='html')
        return

    if chat_id in MENTION_TASKS:
        MENTION_TASKS[chat_id].cancel()
        del MENTION_TASKS[chat_id]

    if chat_id in LAST_MENTION_TIME:
        del LAST_MENTION_TIME[chat_id]

    await event.reply("üîï –°–æ–∑—ã–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", parse_mode='html')

@client.on(events.CallbackQuery(data=b'stop_mention'))
async def stop_mention_callback(event):
    await stop_mention(event)

@client.on(events.NewMessage(pattern='/remove'))
async def remove_user_init(event):
    user_id = event.sender_id
    if event.is_private:
        USER_REMOVE_STATE[user_id] = True
        await event.reply(
            "üõë –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–µ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ @username, t.me: –∏–ª–∏ id —á–∞—Ç–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n(/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
            buttons=[Button.inline("–ì–æ—Ç–æ–≤–æ", b'done_remove')]
        )
    else:
        chat_id = event.chat_id
        if str(chat_id) not in IGNORE_LIST:
            IGNORE_LIST[str(chat_id)] = set()
        IGNORE_LIST[str(chat_id)].add(user_id)
        save_data()
        await event.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{event.sender.first_name}</b> –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", parse_mode='html')

@client.on(events.NewMessage(func=lambda e: e.is_private and e.sender_id in USER_REMOVE_STATE and not e.raw_text.startswith('/cancel')))
async def remove_user_from_chat(event):
    chat_identifier = event.raw_text.strip()
    try:
        chat = await client.get_entity(chat_identifier)
        chat_id = chat.id
        if str(chat_id) not in CHATS:
            await event.reply("‚ùó –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —á–∞—Ç.", buttons=[Button.inline("–ó–∞–∫—Ä—ã—Ç—å", b'close')])
            return
        if str(chat_id) not in IGNORE_LIST:
            IGNORE_LIST[str(chat_id)] = set()
        IGNORE_LIST[str(chat_id)].add(event.sender_id)
        save_data()
        USER_REMOVE_STATE.pop(event.sender_id, None)
        await event.reply(f"‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö –≤ —á–∞—Ç–µ {chat.title}.", buttons=[Button.inline("–ì–æ—Ç–æ–≤–æ", b'done_remove')])
    except Exception as e:
        await event.reply(f"‚ùó –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞/—é–∑–µ—Ä–Ω–µ–π–º –Ω–∞ —á–∞—Ç. –û—à–∏–±–∫–∞: {str(e)}", buttons=[Button.inline("–ó–∞–∫—Ä—ã—Ç—å", b'close')])

@client.on(events.CallbackQuery(data=b'done_remove'))
async def done_remove(event):
    user_id = event.sender_id
    USER_REMOVE_STATE.pop(user_id, None)
    await event.delete()

@client.on(events.CallbackQuery(data=b'close'))
async def close_message(event):
    await event.delete()

@client.on(events.NewMessage(pattern='/add'))
async def add_user_init(event):
    user_id = event.sender_id
    if event.is_private:
        USER_ADD_STATE[user_id] = True
        await event.reply(
            "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–∑—ã–≤–µ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ @username, t.me: –∏–ª–∏ id —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n(/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
            buttons=[Button.inline("–ì–æ—Ç–æ–≤–æ", b'done_add')]
        )
    else:
        chat_id = event.chat_id
        if str(chat_id) in IGNORE_LIST and user_id in IGNORE_LIST[str(chat_id)]:
            IGNORE_LIST[str(chat_id)].remove(user_id)
            save_data()
            await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{event.sender.first_name}</b> —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", parse_mode='html')
        else:
            await event.reply("‚ö†Ô∏è –í—ã –∏ —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", parse_mode='html')

@client.on(events.NewMessage(func=lambda e: e.is_private and e.sender_id in USER_ADD_STATE and not e.raw_text.startswith('/cancel')))
async def add_user_to_chat(event):
    chat_identifier = event.raw_text.strip()
    try:
        chat = await client.get_entity(chat_identifier)
        chat_id = chat.id
        if str(chat_id) not in CHATS:
            await event.reply("‚ùó –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —á–∞—Ç.", buttons=[Button.inline("–ó–∞–∫—Ä—ã—Ç—å", b'close')])
            return
        if str(chat_id) in IGNORE_LIST and event.sender_id in IGNORE_LIST[str(chat_id)]:
            IGNORE_LIST[str(chat_id)].remove(event.sender_id)
            save_data()
            USER_ADD_STATE.pop(event.sender_id, None)
            await event.reply(f"‚úÖ –í—ã —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö –≤ —á–∞—Ç–µ {chat.title}.", buttons=[Button.inline("–ì–æ—Ç–æ–≤–æ", b'done_add')])
        else:
            await event.reply(f"‚ö†Ô∏è –í—ã –∏ —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑—ã–≤–∞—Ö –≤ —á–∞—Ç–µ {chat.title}.", buttons=[Button.inline("–ì–æ—Ç–æ–≤–æ", b'done_add')])
    except Exception as e:
        await event.reply(f"‚ùó –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞/—é–∑–µ—Ä–Ω–µ–π–º –Ω–∞ —á–∞—Ç. –û—à–∏–±–∫–∞: {str(e)}", buttons=[Button.inline("–ó–∞–∫—Ä—ã—Ç—å", b'close')])

@client.on(events.CallbackQuery(data=b'done_add'))
async def done_add(event):
    user_id = event.sender_id
    USER_ADD_STATE.pop(user_id, None)
    await event.delete()

@client.on(events.NewMessage(pattern='/cancel'))
async def cancel_action(event):
    user_id = event.sender_id
    if user_id in USER_REMOVE_STATE or user_id in USER_ADD_STATE or user_id in SEND_MESSAGE_STATE:
        USER_REMOVE_STATE.pop(user_id, None)
        USER_ADD_STATE.pop(user_id, None)
        SEND_MESSAGE_STATE.pop(user_id, None)
        PROCESS_STATE.pop(user_id, None)
        await event.delete()

@client.on(events.CallbackQuery(data=b'admin_panel'))
async def admin_panel_back(event):
    user_id = event.sender_id
    if user_id in PROCESS_STATE:
        PROCESS_STATE.pop(user_id, None)
    sender = await event.get_sender()
    if sender.username in ADMINS:
        await show_admin_panel(event)
    await event.delete()

@client.on(events.NewMessage(func=lambda e: e.is_private and not e.raw_text.startswith('/') and not (e.sender_id in USER_REMOVE_STATE or e.sender_id in USER_ADD_STATE or e.sender_id in SEND_MESSAGE_STATE or e.sender_id in USER_BLOCK_STATE or e.sender_id in USER_UNBLOCK_STATE) and not (e.raw_text.startswith('@') or e.raw_text.startswith('t.me/') or e.raw_text.isdigit())))
async def handle_private_message(event):
    await event.reply("–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –±—É–¥—É –ø–æ–ª–µ–∑–µ–Ω!", buttons=[Button.url("–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", "https://t.me/Sozivalala_bot?startgroup=true")])

@client.on(events.ChatAction)
async def greet_on_addition(event):
    chat = await event.get_chat()
    if chat.id in BLOCKED_CHATS:
        await client.kick_participant(chat.id, 'me')
        return

    if event.user_added or event.user_joined:
        for new_member in event.users:
            if new_member.id == (await client.get_me()).id:
                if chat.id not in CHATS:
                    CHATS[str(chat.id)] = chat.title
                    save_data()
                    await client.send_message(event.chat_id,
                        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑—ã–≤–∞ –ª—é–¥–µ–π.\n"
                        "–û—Ç–ø—Ä–∞–≤—å <code>/run</code> –¥–ª—è —Å–æ–∑—ã–≤–∞ üì¢\n"
                        "–¢–∞–∫ –∂–µ —è —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ <code>@a</code>, <code>@all</code>, <code>@everyone</code> ü§ó",
                        parse_mode='html'
                    )

@client.on(events.NewMessage(pattern='/admin'))
async def admin_panel(event):
    if not event.is_private:
        await event.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", parse_mode='html')
        return

    sender = await event.get_sender()
    if sender.username not in ADMINS:
        await event.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", parse_mode='html')
        return

    await show_admin_panel(event)

async def show_admin_panel(event):
    buttons = [
        [Button.inline('–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç', b'send_message'), Button.inline('–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤', b'list_chats')],
        [Button.inline('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', b'add_admin'), Button.inline('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', b'remove_admin')],
        [Button.inline('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', b'block'), Button.inline('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', b'unblock')],
        [Button.inline('–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö', b'list_blocked'), Button.inline('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', b'list_admins')],
        [Button.inline('–õ–æ–≥–∏', b'view_logs'), Button.inline('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞', b'restart_bot')],
        [Button.inline('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏', b'check_load')],
        [Button.inline('–ù–∞–∑–∞–¥', b'admin_panel')]
    ]

    await event.reply('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', buttons=buttons)

@client.on(events.CallbackQuery(data=b'send_message'))
async def send_message_init(event):
    if not event.is_private:
        await event.respond("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    user_id = event.sender_id
    if user_id in PROCESS_STATE:
        await event.respond("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        return

    PROCESS_STATE[user_id] = {'state': 'awaiting_chat'}
    await event.respond('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ @username, ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.NewMessage(func=lambda e: e.is_private and e.sender_id in PROCESS_STATE and PROCESS_STATE[e.sender_id]['state'] == 'awaiting_chat'))
async def get_chat_and_message(event):
    chat_identifier = event.raw_text.strip()
    try:
        chat = await client.get_entity(chat_identifier)
        chat_id = chat.id
        if str(chat_id) not in CHATS:
            await event.reply('‚ùó –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —á–∞—Ç.', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
            return
        PROCESS_STATE[event.sender_id] = {'state': 'awaiting_message', 'chat_id': chat.id, 'chat_name': chat.title}
        await event.reply(f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç {chat.title}. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
    except Exception as e:
        await event.reply(f'‚ùó –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞/—é–∑–µ—Ä–Ω–µ–π–º –Ω–∞ —á–∞—Ç. –û—à–∏–±–∫–∞: {str(e)}', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.NewMessage(func=lambda e: e.is_private and e.sender_id in PROCESS_STATE and PROCESS_STATE[e.sender_id]['state'] == 'awaiting_message'))
async def send_message_to_chat(event):
    chat_id = PROCESS_STATE[event.sender_id]['chat_id']
    try:
        if event.raw_text.startswith('@') or event.raw_text.startswith('t.me/'):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        await client.send_message(chat_id, event.raw_text)
        await event.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
    except Exception as e:
        await event.reply(f'‚ùå –û—à–∏–±–∫–∞: {e}', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.CallbackQuery(data=b'list_chats'))
async def list_chats(event):
    await event.delete()
    if CHATS:
        chat_list = '\n'.join([f"<code>{chat_id}</code>: {chat_title}" for chat_id, chat_title in CHATS.items()])
    else:
        chat_list = "ü§ñ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç."
    
    await event.reply(f"üìÉ –ß–∞—Ç—ã —Å –±–æ—Ç–æ–º:\n{chat_list}", buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')], parse_mode='html')

@client.on(events.CallbackQuery(data=b'add_admin'))
async def add_admin(event):
    sender = await event.get_sender()
    if not event.is_private or sender.username != 'vsakoe0':
        await event.respond("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    user_id = event.sender_id
    if user_id in PROCESS_STATE:
        await event.respond("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        return

    PROCESS_STATE[user_id] = {'state': 'adding_admin'}
    await event.respond('üë§ –í–≤–µ–¥–∏—Ç–µ @username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
    
    def handler(event_inner):
        return event_inner.is_private and event_inner.sender_id == user_id and PROCESS_STATE.get(user_id, {}).get('state') == 'adding_admin'

    @client.on(events.NewMessage(func=handler))
    async def get_new_admin(event_inner):
        new_admin = event_inner.raw_text.strip()
        try:
            entity = await client.get_entity(new_admin)
            if isinstance(entity, types.User):
                if entity.username in ADMINS:
                    await event_inner.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity.username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
                else:
                    ADMINS.append(entity.username)
                    save_data()
                    await event_inner.reply(f'‚úÖ –ê–¥–º–∏–Ω {entity.username} –¥–æ–±–∞–≤–ª–µ–Ω.', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
            else:
                await event_inner.reply("‚ùå –≠—Ç–æ –Ω–µ —á–µ–ª–æ–≤–µ–∫. –û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞.", buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
        except ValueError:
            await event_inner.reply("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –∏ –Ω–µ —é–∑–µ—Ä–Ω–µ–π–º. –û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.CallbackQuery(data=b'remove_admin'))
async def remove_admin(event):
    sender = await event.get_sender()
    if not event.is_private or sender.username != 'vsakoe0':
        await event.respond("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    user_id = event.sender_id
    if user_id in PROCESS_STATE:
        await event.respond("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        return

    PROCESS_STATE[user_id] = {'state': 'removing_admin'}
    await event.respond('üë§ –í–≤–µ–¥–∏—Ç–µ @username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
    
    def handler(event_inner):
        return event_inner.is_private and event_inner.sender_id == user_id and PROCESS_STATE.get(user_id, {}).get('state') == 'removing_admin'

    @client.on(events.NewMessage(func=handler))
    async def remove_existing_admin(event_inner):
        admin_to_remove = event_inner.raw_text.strip()
        if admin_to_remove in ADMINS:
            ADMINS.remove(admin_to_remove)
            save_data()
            await event_inner.reply(f'‚úÖ –ê–¥–º–∏–Ω {admin_to_remove} —É–¥–∞–ª–µ–Ω.', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
        else:
            await event_inner.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_to_remove} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.CallbackQuery(data=b'block'))
async def block_entity_init(event):
    if not event.is_private:
        await event.respond("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    user_id = event.sender_id
    if user_id in PROCESS_STATE:
        await event.respond("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        return

    PROCESS_STATE[user_id] = {'state': 'blocking'}
    await event.delete()
    await event.respond('üö´ –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
    
    USER_BLOCK_STATE[event.sender_id] = True

@client.on(events.CallbackQuery(data=b'unblock'))
async def unblock_entity_init(event):
    if not event.is_private:
        await event.respond("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    user_id = event.sender_id
    if user_id in PROCESS_STATE:
        await event.respond("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        return

    PROCESS_STATE[user_id] = {'state': 'unblocking'}
    await event.delete()
    await event.respond('üîì –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])
    
    USER_UNBLOCK_STATE[event.sender_id] = True

@client.on(events.CallbackQuery(data=b'list_admins'))
async def list_admins(event):
    await event.delete()
    admins_list = '\n'.join(ADMINS) if ADMINS else "üö´ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç."
    await event.reply(f"üìú –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admins_list}", buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.CallbackQuery(data=b'view_logs'))
async def view_logs(event):
    sender = await event.get_sender()
    if sender.username != 'vsakoe0':
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.")
        return

    await event.delete()
    try:
        with open('bot.log', 'r') as log_file:
            logs = log_file.readlines()[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        log_text = ''.join(logs)
    except IOError:
        log_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏."

    await event.reply(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n<code>{log_text}</code>", parse_mode='html', buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.CallbackQuery(data=b'check_load'))
async def check_load(event):
    sender = await event.get_sender()
    if sender.username != 'vsakoe0':
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏.")
        return

    await event.delete()
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    uptime = time.time() - psutil.boot_time()
    uptime_str = time.strftime("%H:%M:%S", time.gmtime(uptime))

    response = (
        f"üñ•Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –±–æ—Ç–∞:\n"
        f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_usage}%\n"
        f"–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_info.percent}%\n"
        f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
    )

    await event.reply(response, buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

async def process_block_or_unblock(event, block=True):
    user_id = event.sender_id
    chat_identifier = event.raw_text.strip()
    action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if block else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    try:
        entity = await client.get_entity(chat_identifier)
        if isinstance(entity, types.User):
            if block:
                BLOCKED_USERS.add(entity.username)
            else:
                BLOCKED_USERS.discard(entity.username)
            save_data()
            await event.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity.username} {action}.")
        elif isinstance(entity, (types.Chat, types.Channel)):
            if block:
                BLOCKED_CHATS.add(entity.id)
                await client.send_message(entity.id, f"–í–∞—à —á–∞—Ç {entity.title} –≤–Ω–µ—Å—ë–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –∏–ª–∏ –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏.", buttons=[Button.url("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "t.me/sozivalala")])
                await client.kick_participant(entity.id, 'me')
            else:
                BLOCKED_CHATS.discard(entity.id)
            save_data()
            await event.reply(f"–ß–∞—Ç {entity.title} {action}.")
    except Exception as e:
        await event.reply(f"‚ùó –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞/—é–∑–µ—Ä–Ω–µ–π–º –Ω–∞ —á–∞—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(func=lambda e: e.is_private and e.sender_id in USER_BLOCK_STATE))
async def block_entity(event):
    await process_block_or_unblock(event, block=True)
    USER_BLOCK_STATE.pop(event.sender_id, None)
    PROCESS_STATE.pop(event.sender_id, None)

@client.on(events.NewMessage(func=lambda e: e.is_private and e.sender_id in USER_UNBLOCK_STATE))
async def unblock_entity(event):
    await process_block_or_unblock(event, block=False)
    USER_UNBLOCK_STATE.pop(event.sender_id, None)
    PROCESS_STATE.pop(event.sender_id, None)

@client.on(events.CallbackQuery(data=b'list_blocked'))
async def list_blocked(event):
    await event.delete()
    blocked_users_list = '\n'.join(BLOCKED_USERS) if BLOCKED_USERS else "üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
    blocked_chats_list = '\n'.join(map(str, BLOCKED_CHATS)) if BLOCKED_CHATS else "üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç."
    
    await event.reply(f"üìú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{blocked_users_list}\nüìú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:\n{blocked_chats_list}", buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

@client.on(events.CallbackQuery(data=b'restart_bot'))
async def restart_bot(event):
    sender = await event.get_sender()
    if sender.username == 'vsakoe0':
        await event.respond("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
        os.execv(sys.executable, ['python'] + sys.argv)
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞.", buttons=[Button.inline("–ù–∞–∑–∞–¥", b'admin_panel')])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–æ–≤
@client.on(events.NewMessage(pattern='/backup'))
async def send_backup(event):
    sender = await event.get_sender()
    if sender.username == 'vsakoe0':
        backup_data()
        await client.send_file(sender.id, BACKUP_FILE, caption="üóÇ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö")
    else:
        await event.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞.")

@client.on(events.NewMessage(pattern='/restore'))
async def restore_backup(event):
    sender = await event.get_sender()
    if sender.username == 'vsakoe0':
        if restore_from_backup():
            await event.reply("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞.")
        else:
            await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞.")
    else:
        await event.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

print("Bot is running...")
logging.info("Bot is running...")
client.run_until_disconnected()